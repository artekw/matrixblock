# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HT1632c', [dirname(__file__)])
        except ImportError:
            import _HT1632c
            return _HT1632c
        if fp is not None:
            try:
                _mod = imp.load_module('_HT1632c', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _HT1632c = swig_import_helper()
    del swig_import_helper
else:
    import _HT1632c
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HT1632_ID_CMD = _HT1632c.HT1632_ID_CMD
HT1632_ID_RD = _HT1632c.HT1632_ID_RD
HT1632_ID_WR = _HT1632c.HT1632_ID_WR
HT1632_ID_BITS = _HT1632c.HT1632_ID_BITS
HT1632_CMD_SYSDIS = _HT1632c.HT1632_CMD_SYSDIS
HT1632_CMD_SYSON = _HT1632c.HT1632_CMD_SYSON
HT1632_CMD_LEDOFF = _HT1632c.HT1632_CMD_LEDOFF
HT1632_CMD_LEDON = _HT1632c.HT1632_CMD_LEDON
HT1632_CMD_BLOFF = _HT1632c.HT1632_CMD_BLOFF
HT1632_CMD_BLON = _HT1632c.HT1632_CMD_BLON
HT1632_CMD_SLVMD = _HT1632c.HT1632_CMD_SLVMD
HT1632_CMD_MSTMD = _HT1632c.HT1632_CMD_MSTMD
HT1632_CMD_RCCLK = _HT1632c.HT1632_CMD_RCCLK
HT1632_CMD_EXTCLK = _HT1632c.HT1632_CMD_EXTCLK
HT1632_CMD_COMS00 = _HT1632c.HT1632_CMD_COMS00
HT1632_CMD_COMS01 = _HT1632c.HT1632_CMD_COMS01
HT1632_CMD_COMS10 = _HT1632c.HT1632_CMD_COMS10
HT1632_CMD_COMS11 = _HT1632c.HT1632_CMD_COMS11
HT1632_CMD_PWM = _HT1632c.HT1632_CMD_PWM
HT1632_CMD_BITS = _HT1632c.HT1632_CMD_BITS
BLACK = _HT1632c.BLACK
GREEN = _HT1632c.GREEN
RED = _HT1632c.RED
ORANGE = _HT1632c.ORANGE
NCOLUMNS = _HT1632c.NCOLUMNS
DELAY = _HT1632c.DELAY
class HT1632c(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HT1632c, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HT1632c, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HT1632c.new_HT1632c(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["bank"] = _HT1632c.HT1632c_bank_set
    __swig_getmethods__["bank"] = _HT1632c.HT1632c_bank_get
    if _newclass:bank = _swig_property(_HT1632c.HT1632c_bank_get, _HT1632c.HT1632c_bank_set)
    __swig_setmethods__["ht1632_data"] = _HT1632c.HT1632c_ht1632_data_set
    __swig_getmethods__["ht1632_data"] = _HT1632c.HT1632c_ht1632_data_get
    if _newclass:ht1632_data = _swig_property(_HT1632c.HT1632c_ht1632_data_get, _HT1632c.HT1632c_ht1632_data_set)
    __swig_setmethods__["ht1632_wrclk"] = _HT1632c.HT1632c_ht1632_wrclk_set
    __swig_getmethods__["ht1632_wrclk"] = _HT1632c.HT1632c_ht1632_wrclk_get
    if _newclass:ht1632_wrclk = _swig_property(_HT1632c.HT1632c_ht1632_wrclk_get, _HT1632c.HT1632c_ht1632_wrclk_set)
    __swig_setmethods__["ht1632_cs"] = _HT1632c.HT1632c_ht1632_cs_set
    __swig_getmethods__["ht1632_cs"] = _HT1632c.HT1632c_ht1632_cs_get
    if _newclass:ht1632_cs = _swig_property(_HT1632c.HT1632c_ht1632_cs_get, _HT1632c.HT1632c_ht1632_cs_set)
    __swig_setmethods__["ht1632_clk"] = _HT1632c.HT1632c_ht1632_clk_set
    __swig_getmethods__["ht1632_clk"] = _HT1632c.HT1632c_ht1632_clk_get
    if _newclass:ht1632_clk = _swig_property(_HT1632c.HT1632c_ht1632_clk_get, _HT1632c.HT1632c_ht1632_clk_set)
    __swig_setmethods__["Number_of_Displays"] = _HT1632c.HT1632c_Number_of_Displays_set
    __swig_getmethods__["Number_of_Displays"] = _HT1632c.HT1632c_Number_of_Displays_get
    if _newclass:Number_of_Displays = _swig_property(_HT1632c.HT1632c_Number_of_Displays_get, _HT1632c.HT1632c_Number_of_Displays_set)
    __swig_setmethods__["CHIP_MAX"] = _HT1632c.HT1632c_CHIP_MAX_set
    __swig_getmethods__["CHIP_MAX"] = _HT1632c.HT1632c_CHIP_MAX_get
    if _newclass:CHIP_MAX = _swig_property(_HT1632c.HT1632c_CHIP_MAX_get, _HT1632c.HT1632c_CHIP_MAX_set)
    __swig_setmethods__["X_MAX"] = _HT1632c.HT1632c_X_MAX_set
    __swig_getmethods__["X_MAX"] = _HT1632c.HT1632c_X_MAX_get
    if _newclass:X_MAX = _swig_property(_HT1632c.HT1632c_X_MAX_get, _HT1632c.HT1632c_X_MAX_set)
    __swig_setmethods__["Y_MAX"] = _HT1632c.HT1632c_Y_MAX_set
    __swig_getmethods__["Y_MAX"] = _HT1632c.HT1632c_Y_MAX_get
    if _newclass:Y_MAX = _swig_property(_HT1632c.HT1632c_Y_MAX_get, _HT1632c.HT1632c_Y_MAX_set)
    def OutputCLK_Pulse(self): return _HT1632c.HT1632c_OutputCLK_Pulse(self)
    def OutputA_74164(self, *args): return _HT1632c.HT1632c_OutputA_74164(self, *args)
    def ChipSelect(self, *args): return _HT1632c.HT1632c_ChipSelect(self, *args)
    def ht1632_writebits(self, *args): return _HT1632c.HT1632c_ht1632_writebits(self, *args)
    def ht1632_sendcmd(self, *args): return _HT1632c.HT1632c_ht1632_sendcmd(self, *args)
    def ht1632_senddata(self, *args): return _HT1632c.HT1632c_ht1632_senddata(self, *args)
    def ht1632_setup(self): return _HT1632c.HT1632c_ht1632_setup(self)
    def xyToIndex(self, *args): return _HT1632c.HT1632c_xyToIndex(self, *args)
    def get_pixel(self, *args): return _HT1632c.HT1632c_get_pixel(self, *args)
    def ht1632_plot(self, *args): return _HT1632c.HT1632c_ht1632_plot(self, *args)
    def ht1632_clear(self): return _HT1632c.HT1632c_ht1632_clear(self)
    def set_brightness(self, *args): return _HT1632c.HT1632c_set_brightness(self, *args)
    def ht1632_putchar(self, *args): return _HT1632c.HT1632c_ht1632_putchar(self, *args)
    def scrolltextxcolor(self, *args): return _HT1632c.HT1632c_scrolltextxcolor(self, *args)
    def setup(self): return _HT1632c.HT1632c_setup(self)
    def cls(self): return _HT1632c.HT1632c_cls(self)
    def putChar(self, *args): return _HT1632c.HT1632c_putChar(self, *args)
    def text(self, *args): return _HT1632c.HT1632c_text(self, *args)
    __swig_destroy__ = _HT1632c.delete_HT1632c
    __del__ = lambda self : None;
HT1632c_swigregister = _HT1632c.HT1632c_swigregister
HT1632c_swigregister(HT1632c)

# This file is compatible with both classic and new-style classes.


